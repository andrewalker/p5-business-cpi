=encoding utf-8

=head1 NAME

CPI - Common Payment Interface

=head1 SYNOPSIS

    # the objects are created with the same keys
    my $paypal = CPI->new(
        gateway        => "PayPal",
        receiver_email => "test@example.com",
        ...
    );
    my $pagseguro = CPI->new(
        gateway        => "PagSeguro",
        receiver_email => "test@example.com",
        ...
    );

    # the method names and arguments are similar
    my $pag_transactions = $pagseguro->query_transactions({
        start_date => DateTime->now->subtract({ days => 5 }),
        end_date   => DateTime->now,
    });
    my $pay_transactions = $paypal->query_transactions({
        start_date => DateTime->now->subtract({ days => 5 }),
        end_date   => DateTime->now,
    });

=head1 DESCRIPTION

CPI intends to create a common interface between different payment gateways
interfaces. There are on CPAN a few modules which provide interfaces for
payment API's like PayPal (Business::PayPal::*), PagSeguro (PagSeguro::Status),
and so forth. But each of these are completely different.

CPI provides a common interface, making it really easy to support several
payment gateways in a single application.

=head2 Making payments

This is probably the main point of this module: submit a checkout form to the
gateway. Currently, this is only implemented using HTML forms. This may change
in the future, as many gateways provide API's for paying using SOAP, NVP, etc.

To submit a payment, first we make a CPI object:

    my $cpi = CPI->new(
        gateway        => 'Test',

        # the person who will receive the money
        receiver_email => 'john@doe.com',

        currency       => 'BRL',
        # ...
    );

In a persistent environment, such as a Catalyst application, there would be no
need to build a new CPI object by request. A single CPI object can handle as
many carts as desired.

    my $cart = $cpi->new_cart({
        buyer => {
            email => 'buyer@doe.com',
            name  => 'Mr. Buyer',
            # ...
        },
    });

    $cart->add_item({
        id          => 'ref123',
        description => 'X-Burguer',
        price       => 10.50,
        quantity    => 1,
    });

    $cart->add_item({
        id          => 'ref33',
        description => 'Orange juice',
        price       => 3.00,
        quantity    => 2,
    });

    my $form = $cart->get_form; # HTML::Element form

In your template, you could have, for instance:

    [% form.as_HTML %]

=head1 CAVEATS

This is alpha software. The interface is unstable, and may change without
notice.

=head1 AUTHOR

Andr√© Walker

=head1 LICENSE

This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.
